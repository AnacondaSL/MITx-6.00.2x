Greedy Algorithms 贪心算法
找到local optimal 不是global optimal 甚至无法知道how close to global optimal. but is good enough. 背包问题（knapsack problem）

0-1背包问题：
给定n种物品和一个背包。物品i的重量是Wi，其价值为Vi，背包的容量为C。应如何选择装入背包的物品，使得装入背包中物品的总价值最大?

在选择装入背包的物品时，对每种物品i只有2种选择，即装入背包或不装入背包。不能将物品i装入背包多次，也不能只装入部分的物品i。
背包问题：
与0-1背包问题类似，所不同的是在选择物品i装入背包时，可以选择物品i的一部分，而不一定要全部装入背包，1 <= i <= n。
这2类问题都具有最优子结构性质，极为相似，但背包问题可以用贪心算法求解，而0-1背包问题却不能用贪心算法求解。

算法knapsack的主要计算时间在于将各种物品依其单位重量的价值从大到小排序。因此，算法的计算时间上界为 O（nlogn）。

为了证明算法的正确性，还必须证明背包问题具有贪心选择性质。

对于0-1背包问题，贪心选择之所以不能得到最优解是因为在这种情况下，它无法保证最终能将背包装满，部分闲置的背包空间使每公斤背包空间的价值降低了。事实上，在考虑0-1背包问题时，应比较选择该物品和不选择该物品所导致的最终方案，然后再作出最好选择。由此就导出许多互相重叠的子问题。这正是该问题可用动态规划算法求解的另一重要特征。实际上也是如此，动态规划算法的确可以有效地解0-1背包问题。

贪心算法解决背包问题：
while knapsack not full:
  put "best" avaiable item into the knapsack
"""
problem: what is the best item:
most valuable?
least exprensive?
highest value per units?

An example:
不同food own its name, value, calories
Class Food

class Food(object):
  def_init_(self,n,v,w):
    self.name = n
    self.value = v
    self.calories = w
  
  def getValue(self):
    return self.value
  def getCost(self):
    return self.calories
  def density(self):
    return self.getValue()/self.getCost()
    
  def_str_(self):
    return self.name+':<' + str(self.value)\
    + ', '+str(self.calories)+'>'
    
    
    



Brute Force Algorithms

